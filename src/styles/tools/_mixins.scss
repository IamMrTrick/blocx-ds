// SCSS Mixins
// Reusable mixins for common patterns and behaviors

@import '../tokens/colors';
@import '../tokens/typography';
@import '../tokens/spacing';
@import '../tokens/radius';

// Flexbox mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-around {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-row {
  display: flex;
  flex-direction: row;
}

@mixin flex-wrap {
  flex-wrap: wrap;
}

@mixin flex-nowrap {
  flex-wrap: nowrap;
}

// Typography mixins
@mixin heading-1 {
  font-size: var(--font-size-4xl);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-tight);
  letter-spacing: -0.025em;
}

@mixin heading-2 {
  font-size: var(--font-size-3xl);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-snug);
  letter-spacing: -0.025em;
}

@mixin heading-3 {
  font-size: var(--font-size-2xl);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-snug);
}

@mixin heading-4 {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-snug);
}

@mixin heading-5 {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-medium);
  line-height: var(--line-height-snug);
}

@mixin heading-6 {
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-medium);
  line-height: var(--line-height-snug);
}

@mixin body-text {
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-normal);
}

@mixin body-text-large {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-relaxed);
}

@mixin body-text-small {
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-normal);
}

@mixin caption {
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-medium);
  line-height: var(--line-height-tight);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

// Spacing mixins
@mixin margin($size) {
  margin: var(--spacing-#{$size});
}

@mixin margin-top($size) {
  margin-top: var(--spacing-#{$size});
}

@mixin margin-bottom($size) {
  margin-bottom: var(--spacing-#{$size});
}

@mixin margin-left($size) {
  margin-left: var(--spacing-#{$size});
}

@mixin margin-right($size) {
  margin-right: var(--spacing-#{$size});
}

@mixin margin-x($size) {
  margin-left: var(--spacing-#{$size});
  margin-right: var(--spacing-#{$size});
}

@mixin margin-y($size) {
  margin-top: var(--spacing-#{$size});
  margin-bottom: var(--spacing-#{$size});
}

@mixin padding($size) {
  padding: var(--spacing-#{$size});
}

@mixin padding-top($size) {
  padding-top: var(--spacing-#{$size});
}

@mixin padding-bottom($size) {
  padding-bottom: var(--spacing-#{$size});
}

@mixin padding-left($size) {
  padding-left: var(--spacing-#{$size});
}

@mixin padding-right($size) {
  padding-right: var(--spacing-#{$size});
}

@mixin padding-x($size) {
  padding-left: var(--spacing-#{$size});
  padding-right: var(--spacing-#{$size});
}

@mixin padding-y($size) {
  padding-top: var(--spacing-#{$size});
  padding-bottom: var(--spacing-#{$size});
}

// Responsive breakpoint mixins
@mixin mobile-first {
  // Mobile-first approach
}

@mixin tablet-up {
  @media (min-width: 768px) {
    @content;
  }
}

@mixin desktop-up {
  @media (min-width: 1024px) {
    @content;
  }
}

@mixin wide-up {
  @media (min-width: 1280px) {
    @content;
  }
}

@mixin ultra-wide-up {
  @media (min-width: 1536px) {
    @content;
  }
}

// Interactive state mixins
@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
}

@mixin focus-visible {
  &:focus-visible {
    @content;
  }
}

@mixin active {
  &:active {
    @content;
  }
}

@mixin disabled {
  &:disabled {
    @content;
  }
}

// Animation mixins
@mixin transition($property: all, $duration: 0.2s, $timing: ease-in-out) {
  transition: $property $duration $timing;
}

@mixin transition-fast {
  transition: all 0.15s ease-in-out;
}

@mixin transition-normal {
  transition: all 0.2s ease-in-out;
}

@mixin transition-slow {
  transition: all 0.3s ease-in-out;
}

@mixin transform($transform) {
  transform: $transform;
}

@mixin scale($scale) {
  transform: scale($scale);
}

@mixin rotate($degrees) {
  transform: rotate($degrees);
}

@mixin translate($x, $y) {
  transform: translate($x, $y);
}

@mixin translate-x($x) {
  transform: translateX($x);
}

@mixin translate-y($y) {
  transform: translateY($y);
}

// Shadow mixins
@mixin shadow-sm {
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
}

@mixin shadow {
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
}

@mixin shadow-md {
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

@mixin shadow-lg {
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

@mixin shadow-xl {
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

@mixin shadow-2xl {
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}

// Border mixins
@mixin border($width: 1px, $style: solid, $color: var(--color-neutral-200)) {
  border: $width $style $color;
}

@mixin border-top($width: 1px, $style: solid, $color: var(--color-neutral-200)) {
  border-top: $width $style $color;
}

@mixin border-bottom($width: 1px, $style: solid, $color: var(--color-neutral-200)) {
  border-bottom: $width $style $color;
}

@mixin border-left($width: 1px, $style: solid, $color: var(--color-neutral-200)) {
  border-left: $width $style $color;
}

@mixin border-right($width: 1px, $style: solid, $color: var(--color-neutral-200)) {
  border-right: $width $style $color;
}

@mixin border-radius($radius) {
  border-radius: var(--radius-#{$radius});
}

@mixin border-radius-global($type) {
  @if $type == 'wrapper' {
    border-radius: var(--gl-radius-wrapper);
  } @else if $type == 'inner-wrapper' {
    border-radius: var(--gl-radius-inner-wrapper);
  } @else if $type == 'in-inner-wrapper' {
    border-radius: var(--gl-radius-in-inner-wrapper);
  } @else if $type == 'cards' {
    border-radius: var(--gl-radius-cards);
  } @else if $type == 'btn' {
    border-radius: var(--gl-radius-btn);
  } @else if $type == 'inpts' {
    border-radius: var(--gl-radius-inpts);
  } @else if $type == 'inpt-text-area' {
    border-radius: var(--gl-radius-inpt-text-area);
  }
}

// Background mixins
@mixin bg-color($color) {
  background-color: var(--color-#{$color});
}

@mixin bg-primary($shade: 500) {
  background-color: var(--color-primary-#{$shade});
}

@mixin bg-neutral($shade: 500) {
  background-color: var(--color-neutral-#{$shade});
}

@mixin bg-gradient($direction: to right, $start-color: var(--color-primary-500), $end-color: var(--color-primary-700)) {
  background: linear-gradient($direction, $start-color, $end-color);
}

// Text mixins
@mixin text-color($color) {
  color: var(--color-#{$color});
}

@mixin text-primary($shade: 600) {
  color: var(--color-primary-#{$shade});
}

@mixin text-neutral($shade: 700) {
  color: var(--color-neutral-#{$shade});
}

@mixin text-center {
  text-align: center;
}

@mixin text-left {
  text-align: left;
}

@mixin text-right {
  text-align: right;
}

@mixin text-justify {
  text-align: justify;
}

// Layout mixins
@mixin container($max-width: 1200px) {
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 var(--spacing-24);
}

@mixin grid($columns: 1, $gap: var(--spacing-24)) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-bottom: percentage($height / $width);
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// Utility mixins
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
